// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class TeliverSettings;
@class TeliverTracker;
@class UIViewController;

/// Teliver: This class is the interface for the SDK exposed methods.
SWIFT_CLASS("_TtC7teliver7Teliver")
@interface Teliver : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SDKVersion;)
+ (NSString * _Nonnull)SDKVersion SWIFT_WARN_UNUSED_RESULT;
/// @abstract Initialize the Teliver SDK with the provided settings.
/// @discussion This may only be called once (preferably, in application:didFinishLaunchingWithOptions:).
/// @param settings The settings to use. Refer @TeliverSettings for more information.
- (nonnull instancetype)initWithTeliverSettings:(TeliverSettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
/// @abstract Identify User for Teliver.
/// @discussion Register the the user with teliver to be identified.
/// @param username The username of a user to map the push notification token.
+ (void)identifyUserForUser:(NSString * _Nonnull)username;
+ (BOOL)isTeliverPushWithData:(NSDictionary * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// @abstract Identify User for Teliver Push Notification with the username.
/// @discussion Register the push notification token to recieve Push Notification from Teliver Server.
/// @param username The username of a user to map the push notification token.
/// @param token    The push notification token.
+ (void)identifyUserForUser:(NSString * _Nonnull)username withToken:(NSString * _Nonnull)token;
/// @abstract Start tracking the operator using the tracking Id provided by the operator.
/// @discussion This method helps to track the operator with help of tracking id provided the operator at start of his trip. Use can use Teliver Push Service from Operator SDK to recieve tracking id through Push Notification.
/// @param user     A Single Teliver Tracker object of a user to be tracked. Refer @TeliverTracker for more information.
/// @param message  Message to be shown on Navigation Bar.
+ (void)startTrackingForUser:(TeliverTracker * _Nonnull)user withNavigationTitle:(NSString * _Nonnull)message;
/// @abstract Start tracking multiple operator using the tracking Id provided by the operator.
/// @discussion This method helps to track the operator with help of tracking id provided the operator at start of his trip. Use can use Teliver Push Service from Operator SDK to recieve tracking id through Push Notification.
/// @param user     A array of Teliver Tracker object of a users to be tracked. Refer @TeliverTracker for more information.
/// @param message  Message to be shown on Navigation Bar.
+ (void)startTrackingForUsers:(NSArray<TeliverTracker *> * _Nonnull)users withNavigationTitle:(NSString * _Nonnull)message;
/// @abstract Start tracking multiple operator using the tracking Id provided by the operator.
/// @discussion This method helps to track the operator with help of tracking id provided the operator at start of his trip. You can create your own view controller, The delegates will be called on your view controller. Refer @TeliverTrackingDelegate for more information.
/// @param user     A array of Teliver Tracker object of a users to be tracked. Refer @TeliverTracker for more information.
/// @param viewController  The viewController to which the delegates to be called.
+ (void)startTrackingForUsers:(NSArray<TeliverTracker *> * _Nonnull)users onViewController:(UIViewController * _Nonnull)viewController;
/// @abstract Start tracking multiple operator using the tracking Id provided by the operator.
/// @discussion This method helps to track the operator with help of tracking id provided the operator at start of his trip. You can create your own view controller, The delegates will be called on your view controller. Refer @TeliverTrackingDelegate for more information.
/// @param user     A Teliver Tracker object of a users to be tracked. Refer @TeliverTracker for more information.
/// @param viewController  The viewController to which the delegates to be called.
+ (void)startTrackingForUser:(TeliverTracker * _Nonnull)user onViewController:(UIViewController * _Nonnull)viewController;
/// @abstract Start tracking operator using the tracking Id provided by the operator.
/// @discussion This method helps to track the operator with help of tracking id provided the operator at start of his trip. This method can be used to start track another operator while tracking another user.
/// This method is only applicable for Tracking on Your view controller. refer @startTrackingFor(user:TeliverTracker,onViewController :viewController:UIViewController)
/// @param user     A Teliver Tracker object of a users to be tracked. Refer @TeliverTracker for more information.
+ (void)startBackgroundTrackingForUser:(TeliverTracker * _Nonnull)user;
/// @abstract Start tracking operator using the tracking Id provided by the operator.
/// @discussion This method helps to track multiple operator with help of tracking id provided the operator at start of his trip. This method can be used to start track another operator while tracking another user.
/// This method is only applicable for Tracking on Your view controller. refer @startTrackingFor(user:TeliverTracker,onViewController :viewController:UIViewController)
/// @param users     A array of Teliver Tracker object of a users to be tracked. Refer @TeliverTracker for more information.
+ (void)startBackgroundTrackingForUsers:(NSArray<TeliverTracker *> * _Nonnull)users;
/// @abstract Stop tracking operator using the tracking Id provided by the operator.
/// @discussion This method helps to stop multiple tracking the operator with help of tracking id provided the operator at start of his trip.
/// This method is only applicable for Tracking on Your view controller. refer @startTrackingFor(user:TeliverTracker,onViewController :viewController:UIViewController)
/// @param trackingIds     A array of tracking ids.
+ (void)stopBackgroundTrackingForTrackingIds:(NSArray<NSString *> * _Nonnull)trackingIds;
/// @abstract Stop tracking operator using the tracking Id provided by the operator.
/// @discussion This method helps to stop tracking the operator with help of tracking id provided the operator at start of his trip.
/// This method is only applicable for Tracking on Your view controller. refer @startTrackingFor(user:TeliverTracker,onViewController :viewController:UIViewController)
/// @param trackingId     A tracking id  of a operator.
+ (void)stopBackgroundTrackingForTrackingId:(NSString * _Nonnull)trackingId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Teliver (SWIFT_EXTENSION(teliver))
@end


/// Teliver Settings: This class has the whole settings, for the SDK to Operate.
SWIFT_CLASS("_TtC7teliver15TeliverSettings")
@interface TeliverSettings : NSObject
/// <ul>
///   <li>
///     Teliver App Id for the SDK.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable appKey;
/// APNS Push Token for the SDK.
@property (nonatomic, copy) NSString * _Nonnull pushToken;
/// Teliver Logs.
@property (nonatomic) BOOL debugging;
/// @abstract Teliver Settings Initializer.
/// @discussion This may only be called once (preferably, in application:didFinishLaunchingWithOptions:).This object is passed as a parameter for Teliver SDK init.
/// @param appKey Teliver App Key.
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey OBJC_DESIGNATED_INITIALIZER;
/// @abstract Teliver Settings Initializer.
/// @discussion This may only be called once (preferably, in application:didFinishLaunchingWithOptions:).This object is passed as a parameter for Teliver SDK init.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// Teliver Tracker: This class has the objects of the Operator tracker point.
SWIFT_CLASS("_TtC7teliver14TeliverTracker")
@interface TeliverTracker : NSObject
/// Tracking id of Operator.
@property (nonatomic, copy) NSString * _Nullable trackingId;
/// Message for the marker snippet.
@property (nonatomic, copy) NSString * _Nullable message;
/// Custom Marker Image.
@property (nonatomic, strong) UIImage * _Nullable marker;
/// @abstract Teliver Tracking Initializer.
/// @discussion This method initializes the Operator user object.
/// @param trackingId   Tracking id of the Operator.
/// @param message      Custom message for the Operator.
/// @param marker       Custom Marker image for the Operator.
- (nonnull instancetype)initForTrackingId:(NSString * _Nonnull)trackingId withCustomMessage:(NSString * _Nonnull)message andWithCustomMarker:(UIImage * _Nonnull)marker OBJC_DESIGNATED_INITIALIZER;
/// @abstract Teliver Tracking Initializer.
/// @discussion This method initializes the Operator user object.
/// @param trackingId   Tracking id of the Operator.
/// @param message      Custom message for the Operator.
- (nonnull instancetype)initForTrackingId:(NSString * _Nonnull)trackingId withCustomMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// @abstract Teliver Tracker Initializer.
/// @discussion This method initializes the Operator user object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7teliver23TeliverTrackingDelegate_")
@protocol TeliverTrackingDelegate
- (void)didStartedTracking:(NSString * _Nullable)trackingId;
- (void)didStoppedTracking:(NSString * _Nullable)trackingId;
- (void)didRecieveUpdateOnTracking:(NSString * _Nullable)trackingId data:(NSDictionary<NSString *, id> * _Nonnull)data;
- (void)didRecieveErrorOnTracking:(NSString * _Nullable)error;
@end


@interface NSTimer (SWIFT_EXTENSION(teliver))
@end


@interface UIDevice (SWIFT_EXTENSION(teliver))
@end


@interface UIImage (SWIFT_EXTENSION(teliver))
@end


@interface UIView (SWIFT_EXTENSION(teliver))
@end


@interface UIViewController (SWIFT_EXTENSION(teliver))
@end

#pragma clang diagnostic pop
